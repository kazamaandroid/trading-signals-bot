
# main.py
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests
def send_test_message():
    message = "‚úÖ El bot de se√±ales se ha iniciado correctamente en Render (ejecuci√≥n en la nube)."
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message
    }
    try:
        response = requests.post(url, data=payload)
        if response.status_code == 200:
            print("Mensaje enviado con √©xito.")
        else:
            print("Error al enviar mensaje:", response.text)
    except Exception as e:
        print("Excepci√≥n al enviar mensaje:", str(e))
if name == "main":
    send_test_message()

Editar
He revisado tu c√≥digo y encontr√© algunas mejoras importantes. Aqu√≠ est√° la versi√≥n corregida y optimizada:


main.py - C√≥digo corregido
C√≥digo 
Principales mejoras implementadas:
1. Error cr√≠tico corregido
Cambi√© if **name** == "__main__": por if __name__ == "__main__": (doble gui√≥n bajo)
2. Manejo de errores mejorado
Agregu√© diferentes tipos de excepciones espec√≠ficas (Timeout, ConnectionError)
Uso de response.raise_for_status() para mejor manejo de errores HTTP
Logging estructurado con diferentes niveles
3. Validaci√≥n de configuraci√≥n
Nueva funci√≥n validate_config() que verifica las variables antes de usar el bot
Validaci√≥n del formato del token de Telegram
4. Mejoras en la comunicaci√≥n con Telegram
Timeout de 10 segundos en las peticiones
Uso de json=payload en lugar de data=payload para mejor serializaci√≥n
Soporte para formato HTML en mensajes
5. Logging profesional
Sistema de logging con timestamps y niveles
Mensajes informativos con emojis para mejor legibilidad
Diferentes niveles de log (INFO, ERROR, WARNING)
6. Funciones documentadas
Docstrings en las funciones principales
C√≥digo m√°s legible y mantenible
7. Control de flujo mejorado
Valores de retorno booleanos para verificar √©xito/fallo
Exit codes apropiados para entornos de producci√≥n
Este c√≥digo es mucho m√°s robusto y profesional, ideal para despliegues en producci√≥n como Render.







# main.py
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID
import requests
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def send_test_message():
    """Env√≠a un mensaje de prueba al chat de Telegram configurado."""
    message = "‚úÖ El bot de se√±ales se ha iniciado correctamente en Render (ejecuci√≥n en la nube)."
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"  # Permite formato HTML en los mensajes
    }
    
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status()  # Lanza excepci√≥n si hay error HTTP
        
        if response.status_code == 200:
            logger.info("‚úÖ Mensaje enviado con √©xito a Telegram")
            return True
        else:
            logger.error(f"‚ùå Error al enviar mensaje. Status: {response.status_code}")
            logger.error(f"Respuesta: {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        logger.error("‚ùå Timeout al conectar con la API de Telegram")
        return False
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå Error de conexi√≥n con la API de Telegram")
        return False
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Error en la petici√≥n HTTP: {str(e)}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Excepci√≥n inesperada: {str(e)}")
        return False

def validate_config():
    """Valida que las configuraciones necesarias est√©n presentes."""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN no est√° configurado")
        return False
    
    if not TELEGRAM_CHAT_ID:
        logger.error("‚ùå TELEGRAM_CHAT_ID no est√° configurado")
        return False
    
    if not TELEGRAM_BOT_TOKEN.startswith('bot'):
        logger.warning("‚ö†Ô∏è El token parece no tener el prefijo 'bot' correcto")
    
    logger.info("‚úÖ Configuraci√≥n validada correctamente")
    return True

if __name__ == "__main__":
    logger.info("üöÄ Iniciando bot de se√±ales...")
    
    # Validar configuraci√≥n antes de enviar mensaje
    if validate_config():
        success = send_test_message()
        if success:
            logger.info("üéâ Bot iniciado exitosamente")
        else:
            logger.error("üí• Error al iniciar el bot")
            exit(1)
    else:
        logger.error("üí• Error en la configuraci√≥n")
        exit(1)
